// <auto-generated />
using cm.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace cm.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("cm.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("cm.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BillingAddressCity")
                        .HasMaxLength(50);

                    b.Property<string>("BillingAddressStreet")
                        .HasMaxLength(100);

                    b.Property<string>("BillingCountry")
                        .HasMaxLength(100);

                    b.Property<string>("BillingState")
                        .HasMaxLength(100);

                    b.Property<string>("BillingZipCode")
                        .HasMaxLength(20);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("CreateById");

                    b.Property<string>("Fax")
                        .HasMaxLength(20);

                    b.Property<bool>("IsCopyBillingAddressToShippingAddress");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(200);

                    b.Property<string>("ShippingAddressCity")
                        .HasMaxLength(50);

                    b.Property<string>("ShippingAddressStreet")
                        .HasMaxLength(100);

                    b.Property<string>("ShippingCountry")
                        .HasMaxLength(100);

                    b.Property<string>("ShippingState")
                        .HasMaxLength(100);

                    b.Property<string>("ShippingZipCode")
                        .HasMaxLength(20);

                    b.Property<string>("Tag")
                        .HasMaxLength(200);

                    b.Property<string>("Website")
                        .HasMaxLength(100);

                    b.HasKey("CompanyId");

                    b.HasIndex("CreateById");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("cm.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("CreateById");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20);

                    b.Property<string>("MailingCity")
                        .HasMaxLength(50);

                    b.Property<string>("MailingCountry")
                        .HasMaxLength(100);

                    b.Property<string>("MailingState")
                        .HasMaxLength(100);

                    b.Property<string>("MailingStreet")
                        .HasMaxLength(100);

                    b.Property<string>("MailingZipCode")
                        .HasMaxLength(20);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20);

                    b.Property<string>("Tag")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .HasMaxLength(20);

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(20);

                    b.HasKey("ContactId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreateById");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("cm.Models.Deal", b =>
                {
                    b.Property<int>("DealId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("CreateById");

                    b.Property<string>("DealName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("DealOwnerId");

                    b.Property<decimal>("DealValue")
                        .HasColumnType("Money");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("ExpectedClosingDate");

                    b.Property<bool?>("IsWon");

                    b.Property<int?>("StatusDealId");

                    b.Property<string>("Tag")
                        .HasMaxLength(200);

                    b.HasKey("DealId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreateById");

                    b.HasIndex("DealOwnerId");

                    b.HasIndex("StatusDealId");

                    b.ToTable("Deal");
                });

            modelBuilder.Entity("cm.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("CreateById");

                    b.Property<string>("NoteName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("NoteId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreateById");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("cm.Models.StatusDeal", b =>
                {
                    b.Property<int>("StatusDealId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusDealName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Weight");

                    b.HasKey("StatusDealId");

                    b.ToTable("StatusDeal");
                });

            modelBuilder.Entity("cm.Models.StatusPriority", b =>
                {
                    b.Property<int>("StatusPriorityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorCode")
                        .HasMaxLength(10);

                    b.Property<string>("StatusPriorityName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("StatusPriorityId");

                    b.ToTable("StatusPriority");
                });

            modelBuilder.Entity("cm.Models.Todo", b =>
                {
                    b.Property<int>("TodoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("CreateAt");

                    b.Property<string>("CreateById");

                    b.Property<int?>("StatusPriorityId");

                    b.Property<string>("Tag")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("TodoCompleteDate");

                    b.Property<string>("TodoName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("TodoId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreateById");

                    b.HasIndex("StatusPriorityId");

                    b.ToTable("Todo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("cm.Models.Company", b =>
                {
                    b.HasOne("cm.Models.ApplicationUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");
                });

            modelBuilder.Entity("cm.Models.Contact", b =>
                {
                    b.HasOne("cm.Models.Company", "Company")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cm.Models.ApplicationUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");
                });

            modelBuilder.Entity("cm.Models.Deal", b =>
                {
                    b.HasOne("cm.Models.Company", "Company")
                        .WithMany("Deals")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cm.Models.ApplicationUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.HasOne("cm.Models.ApplicationUser", "DealOwner")
                        .WithMany()
                        .HasForeignKey("DealOwnerId");

                    b.HasOne("cm.Models.StatusDeal", "StatusDeal")
                        .WithMany()
                        .HasForeignKey("StatusDealId");
                });

            modelBuilder.Entity("cm.Models.Note", b =>
                {
                    b.HasOne("cm.Models.Company", "Company")
                        .WithMany("Notes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cm.Models.ApplicationUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");
                });

            modelBuilder.Entity("cm.Models.Todo", b =>
                {
                    b.HasOne("cm.Models.Company", "Company")
                        .WithMany("Todos")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cm.Models.ApplicationUser", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.HasOne("cm.Models.StatusPriority", "StatusPriority")
                        .WithMany()
                        .HasForeignKey("StatusPriorityId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("cm.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("cm.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("cm.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("cm.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
